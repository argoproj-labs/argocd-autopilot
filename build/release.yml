version: '1.0'
mode: parallel

stages: 
- Prepare
- Test
- Build
- Release

steps:
  
  main_clone:
    stage: Prepare
    title: clone repository
    type: git-clone
    git: cf_github
    repo: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    revision: ${{CF_BRANCH}}

  check_version: &deps
    stage: Prepare
    title: check version
    image: quay.io/codefresh/golang-ci-helper:latest
    commands:
    - cf_export GO111MODULE=on
    - cf_export GOCACHE=/codefresh/volume/gocache # change gopath to codefresh shared volume
    - cf_export GOPATH=/codefresh/volume/gopath
    - cf_export PATH=$PATH:/codefresh/volume/gopath/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin # must have brew in path for final brew step
    - (echo "${{CF_BRANCH}}" | grep -Eq '^release-v(\d+\.)?(\d+\.)?(\*|\d+)$') && echo on release branch || (echo not on release branch && exit 1)
    - RELEASE_VER=$(echo ${{CF_BRANCH_TAG_NORMALIZED_LOWER_CASE}} | sed -E 's/^release-([^"]+).*/\1/')
    - cf_export RELEASE_VER=$RELEASE_VER
    - (gh release view ${RELEASE_VER} --repo ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}) && (echo release with the same name already exists && exit 1) || echo no release with the name ${RELEASE_VER}, we can continue!
    when:
      steps:
      - name: main_clone
        on:
        - success

  download_modules:
    <<: *deps
    stage: Prepare
    title: download go modules
    commands:
    - make clean
    - go mod download -x
    when:
      steps:
      - name: check_version
        on:
        - success

  lint:
    <<: *deps
    stage: Test
    title: lint
    commands:
    - make lint
    when:
      steps:
      - name: download_modules
        on:
        - success
  
  codegen:
    <<: *deps
    stage: Test
    title: check codegen
    commands:
    - make codegen
    - make check-worktree
    when:
      steps:
      - name: lint
        on:
        - success

  test:
    <<: *deps
    stage: Test
    title: run tests
    commands:
    - make test
    when:
      steps:
      - name: codegen
        on:
        - success


  codecov-report:
    stage: Test
    type: codecov-reporter
    title: report code coverage
    fail_fast: false
    arguments:
      codecov_integration: ${{CODECOV_INTEGRATION}}
    when:
      steps:
      - name: test
        on:
        - success

  build:
    stage: Build
    title: build docker image
    type: build
    image_name: ${{IMAGE_NAME}}
    tag: ${{RELEASE_VER}}
    buildkit: true
    disable_push: true
    when:
      steps:
      - name: check_version
        on:
        - success

  scan-image:
    stage: Build
    title: scan docker image
    image: quay.io/codefresh/snyk-cli:latest
    shell: bash
    environment:
    - SNYK_TOKEN=${{SNYK_TOKEN}}
    - LOCAL_IMAGE_REF=${{IMAGE_NAME}}:${{RELEASE_VER}}
    commands:
    - |
      snyk test --severity-threshold=${{SNYK_SEVERITY_THRESHOLD}} || fail=1
      snyk container test --severity-threshold=${{SNYK_SEVERITY_THRESHOLD}} --file=Dockerfile ${LOCAL_IMAGE_REF}
      if [ "$fail" == "1" ]; then exit 1; fi
    when:
      steps:
      - name: build
        on:
        - success
      - name: codegen
        on:
        - success

  build_binaries:
    <<: *deps
    stage: Build
    title: build binaries
    commands:
    - make ./dist/argocd-autopilot-${TARGET}.sha256 DEV_MODE=false
    scale:
      linux_amd64:
        title: linux_amd64
        environment:
         - TARGET=linux-amd64
      linux_arm64:
        title: linux_arm64
        environment:
         - TARGET=linux-arm64
      linux_s390x:
        title: linux_s390x
        environment:
         - TARGET=linux-s390x
      windows_amd64:
        title: windows_amd64
        environment:
         - TARGET=windows-amd64
      darwin_amd64:
        title: darwin_amd64
        environment:
         - TARGET=darwin-amd64
      darwin_arm64:
        title: darwin_arm64
        environment:
         - TARGET=darwin-arm64
    retry:
      maxAttempts: 3
      delay: 1
    when:
      steps:
      - name: test
        on:
        - success
      - name: codegen
        on:
        - success
      - name: lint
        on:
        - success

  create_release:
    <<: *deps
    stage: Release
    title: create github release
    commands:
    - export GIT_REPO=${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    - export GIT_BRANCH=${{CF_BRANCH}}
    - make release
    when:
      steps:
      - name: build_binaries
        on:
        - success
      - name: build
        on:
        - success

  bump_brew_formula:
    stage: Release
    title: bump brew formula version
    image: linuxbrew/brew:latest
    environment:
      - HOMEBREW_GITHUB_API_TOKEN=${{GITHUB_TOKEN}}
    commands:
      - git config --global user.email "cfci.bot@codefresh.io"
      - git config --global user.name "cf-ci-bot"
      - brew bump-formula-pr --strict --no-browse --tag ${{RELEASE_VER}} --revision ${{CF_REVISION}} --fork-org codefresh-io ${{CF_REPO_NAME}}
    when:
      steps:
      - name: create_release
        on:
        - success

  push_prod:
    stage: Release
    title: promote images
    type: push
    candidate: ${{build}}
    tags:
    - latest
    - ${{RELEASE_VER}}
    when:
      steps:
      - name: build_binaries
        on:
        - success
      - name: build
        on:
        - success
    scale:
      push_quay_dev:
        title: push to quay.io
        registry: "${{REGISTRY_INTEGRATION_QUAY}}"
