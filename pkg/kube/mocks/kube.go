// Code generated by MockGen. DO NOT EDIT.
// Source: ./kube.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kube "github.com/argoproj-labs/argocd-autopilot/pkg/kube"
	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
	rest "k8s.io/client-go/rest"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockFactory) Apply(ctx context.Context, manifests []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, manifests)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockFactoryMockRecorder) Apply(ctx, manifests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockFactory)(nil).Apply), ctx, manifests)
}

// Delete mocks base method.
func (m *MockFactory) Delete(arg0 context.Context, arg1 *kube.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFactoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFactory)(nil).Delete), arg0, arg1)
}

// KubernetesClientSet mocks base method.
func (m *MockFactory) KubernetesClientSet() (kubernetes.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesClientSet")
	ret0, _ := ret[0].(kubernetes.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubernetesClientSet indicates an expected call of KubernetesClientSet.
func (mr *MockFactoryMockRecorder) KubernetesClientSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesClientSet", reflect.TypeOf((*MockFactory)(nil).KubernetesClientSet))
}

// KubernetesClientSetOrDie mocks base method.
func (m *MockFactory) KubernetesClientSetOrDie() kubernetes.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesClientSetOrDie")
	ret0, _ := ret[0].(kubernetes.Interface)
	return ret0
}

// KubernetesClientSetOrDie indicates an expected call of KubernetesClientSetOrDie.
func (mr *MockFactoryMockRecorder) KubernetesClientSetOrDie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesClientSetOrDie", reflect.TypeOf((*MockFactory)(nil).KubernetesClientSetOrDie))
}

// ToRESTConfig mocks base method.
func (m *MockFactory) ToRESTConfig() (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRESTConfig")
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToRESTConfig indicates an expected call of ToRESTConfig.
func (mr *MockFactoryMockRecorder) ToRESTConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRESTConfig", reflect.TypeOf((*MockFactory)(nil).ToRESTConfig))
}

// Wait mocks base method.
func (m *MockFactory) Wait(arg0 context.Context, arg1 *kube.WaitOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockFactoryMockRecorder) Wait(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockFactory)(nil).Wait), arg0, arg1)
}
