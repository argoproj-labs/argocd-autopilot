// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v35/github"

	mock "github.com/stretchr/testify/mock"
)

// Organizations is an autogenerated mock type for the Organizations type
type Organizations struct {
	mock.Mock
}

// BlockUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) BlockUser(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConcealMembership provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) ConcealMembership(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConvertMemberToOutsideCollaborator provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) ConvertMemberToOutsideCollaborator(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHook provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) CreateHook(_a0 context.Context, _a1 string, _a2 *github.Hook) (*github.Hook, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Hook
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.Hook) *github.Hook); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Hook)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.Hook) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.Hook) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateOrgInvitation provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) CreateOrgInvitation(_a0 context.Context, _a1 string, _a2 *github.CreateOrgInvitationOptions) (*github.Invitation, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Invitation
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.CreateOrgInvitationOptions) *github.Invitation); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Invitation)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.CreateOrgInvitationOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.CreateOrgInvitationOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateProject provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) CreateProject(_a0 context.Context, _a1 string, _a2 *github.ProjectOptions) (*github.Project, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Project
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.ProjectOptions) *github.Project); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Project)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.ProjectOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.ProjectOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteHook provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) DeleteHook(_a0 context.Context, _a1 string, _a2 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Edit provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) Edit(_a0 context.Context, _a1 string, _a2 *github.Organization) (*github.Organization, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Organization
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.Organization) *github.Organization); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Organization)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.Organization) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.Organization) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EditActionsAllowed provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) EditActionsAllowed(_a0 context.Context, _a1 string, _a2 github.ActionsAllowed) (*github.ActionsAllowed, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.ActionsAllowed
	if rf, ok := ret.Get(0).(func(context.Context, string, github.ActionsAllowed) *github.ActionsAllowed); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.ActionsAllowed)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, github.ActionsAllowed) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, github.ActionsAllowed) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EditActionsPermissions provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) EditActionsPermissions(_a0 context.Context, _a1 string, _a2 github.ActionsPermissions) (*github.ActionsPermissions, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.ActionsPermissions
	if rf, ok := ret.Get(0).(func(context.Context, string, github.ActionsPermissions) *github.ActionsPermissions); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.ActionsPermissions)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, github.ActionsPermissions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, github.ActionsPermissions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EditHook provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Organizations) EditHook(_a0 context.Context, _a1 string, _a2 int64, _a3 *github.Hook) (*github.Hook, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Hook
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, *github.Hook) *github.Hook); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Hook)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, int64, *github.Hook) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int64, *github.Hook) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EditOrgMembership provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Organizations) EditOrgMembership(_a0 context.Context, _a1 string, _a2 string, _a3 *github.Membership) (*github.Membership, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Membership
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.Membership) *github.Membership); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Membership)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.Membership) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.Membership) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *Organizations) Get(_a0 context.Context, _a1 string) (*github.Organization, *github.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *github.Organization
	if rf, ok := ret.Get(0).(func(context.Context, string) *github.Organization); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Organization)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *github.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetActionsAllowed provides a mock function with given fields: _a0, _a1
func (_m *Organizations) GetActionsAllowed(_a0 context.Context, _a1 string) (*github.ActionsAllowed, *github.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *github.ActionsAllowed
	if rf, ok := ret.Get(0).(func(context.Context, string) *github.ActionsAllowed); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.ActionsAllowed)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *github.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetActionsPermissions provides a mock function with given fields: _a0, _a1
func (_m *Organizations) GetActionsPermissions(_a0 context.Context, _a1 string) (*github.ActionsPermissions, *github.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *github.ActionsPermissions
	if rf, ok := ret.Get(0).(func(context.Context, string) *github.ActionsPermissions); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.ActionsPermissions)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *github.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAuditLog provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) GetAuditLog(_a0 context.Context, _a1 string, _a2 *github.GetAuditLogOptions) ([]*github.AuditEntry, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.AuditEntry
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.GetAuditLogOptions) []*github.AuditEntry); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.AuditEntry)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.GetAuditLogOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.GetAuditLogOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *Organizations) GetByID(_a0 context.Context, _a1 int64) (*github.Organization, *github.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *github.Organization
	if rf, ok := ret.Get(0).(func(context.Context, int64) *github.Organization); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Organization)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, int64) *github.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetHook provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) GetHook(_a0 context.Context, _a1 string, _a2 int64) (*github.Hook, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Hook
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *github.Hook); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Hook)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int64) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrgMembership provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) GetOrgMembership(_a0 context.Context, _a1 string, _a2 string) (*github.Membership, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Membership
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Membership); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Membership)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsBlocked provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) IsBlocked(_a0 context.Context, _a1 string, _a2 string) (bool, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsMember provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) IsMember(_a0 context.Context, _a1 string, _a2 string) (bool, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsPublicMember provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) IsPublicMember(_a0 context.Context, _a1 string, _a2 string) (bool, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// List provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) List(_a0 context.Context, _a1 string, _a2 *github.ListOptions) ([]*github.Organization, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.Organization
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.ListOptions) []*github.Organization); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Organization)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAll provides a mock function with given fields: _a0, _a1
func (_m *Organizations) ListAll(_a0 context.Context, _a1 *github.OrganizationsListOptions) ([]*github.Organization, *github.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*github.Organization
	if rf, ok := ret.Get(0).(func(context.Context, *github.OrganizationsListOptions) []*github.Organization); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Organization)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, *github.OrganizationsListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *github.OrganizationsListOptions) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListBlockedUsers provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) ListBlockedUsers(_a0 context.Context, _a1 string, _a2 *github.ListOptions) ([]*github.User, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.User
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.ListOptions) []*github.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.User)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListFailedOrgInvitations provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) ListFailedOrgInvitations(_a0 context.Context, _a1 string, _a2 *github.ListOptions) ([]*github.Invitation, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.Invitation
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.ListOptions) []*github.Invitation); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Invitation)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListHooks provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) ListHooks(_a0 context.Context, _a1 string, _a2 *github.ListOptions) ([]*github.Hook, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.Hook
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.ListOptions) []*github.Hook); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Hook)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListInstallations provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) ListInstallations(_a0 context.Context, _a1 string, _a2 *github.ListOptions) (*github.OrganizationInstallations, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.OrganizationInstallations
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.ListOptions) *github.OrganizationInstallations); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.OrganizationInstallations)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListMembers provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) ListMembers(_a0 context.Context, _a1 string, _a2 *github.ListMembersOptions) ([]*github.User, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.User
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.ListMembersOptions) []*github.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.User)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.ListMembersOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.ListMembersOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListOrgInvitationTeams provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Organizations) ListOrgInvitationTeams(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListOptions) ([]*github.Team, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.Team
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.Team); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Team)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListOrgMemberships provides a mock function with given fields: _a0, _a1
func (_m *Organizations) ListOrgMemberships(_a0 context.Context, _a1 *github.ListOrgMembershipsOptions) ([]*github.Membership, *github.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*github.Membership
	if rf, ok := ret.Get(0).(func(context.Context, *github.ListOrgMembershipsOptions) []*github.Membership); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Membership)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, *github.ListOrgMembershipsOptions) *github.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *github.ListOrgMembershipsOptions) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListOutsideCollaborators provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) ListOutsideCollaborators(_a0 context.Context, _a1 string, _a2 *github.ListOutsideCollaboratorsOptions) ([]*github.User, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.User
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.ListOutsideCollaboratorsOptions) []*github.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.User)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.ListOutsideCollaboratorsOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.ListOutsideCollaboratorsOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPendingOrgInvitations provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) ListPendingOrgInvitations(_a0 context.Context, _a1 string, _a2 *github.ListOptions) ([]*github.Invitation, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.Invitation
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.ListOptions) []*github.Invitation); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Invitation)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListProjects provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) ListProjects(_a0 context.Context, _a1 string, _a2 *github.ProjectListOptions) ([]*github.Project, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.Project
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.ProjectListOptions) []*github.Project); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Project)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.ProjectListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.ProjectListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PingHook provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) PingHook(_a0 context.Context, _a1 string, _a2 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublicizeMembership provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) PublicizeMembership(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMember provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) RemoveMember(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveOrgMembership provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) RemoveOrgMembership(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveOutsideCollaborator provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) RemoveOutsideCollaborator(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnblockUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *Organizations) UnblockUser(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
