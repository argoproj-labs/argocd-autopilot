// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v35/github"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	os "os"

	url "net/url"
)

// Repositories is an autogenerated mock type for the Repositories type
type Repositories struct {
	mock.Mock
}

// AddAdminEnforcement provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) AddAdminEnforcement(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.AdminEnforcement, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.AdminEnforcement
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.AdminEnforcement); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.AdminEnforcement)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AddAppRestrictions provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) AddAppRestrictions(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 []string) ([]*github.App, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*github.App
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) []*github.App); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.App)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, []string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AddCollaborator provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) AddCollaborator(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.RepositoryAddCollaboratorOptions) (*github.CollaboratorInvitation, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.CollaboratorInvitation
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryAddCollaboratorOptions) *github.CollaboratorInvitation); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.CollaboratorInvitation)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryAddCollaboratorOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryAddCollaboratorOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CompareCommits provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) CompareCommits(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 string) (*github.CommitsComparison, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.CommitsComparison
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *github.CommitsComparison); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.CommitsComparison)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CompareCommitsRaw provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *Repositories) CompareCommitsRaw(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 string, _a5 github.RawOptions) (string, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, github.RawOptions) string); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, github.RawOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string, github.RawOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) Create(_a0 context.Context, _a1 string, _a2 *github.Repository) (*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.Repository) *github.Repository); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.Repository) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.Repository) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateComment provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) CreateComment(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.RepositoryComment) (*github.RepositoryComment, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.RepositoryComment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryComment) *github.RepositoryComment); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryComment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryComment) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryComment) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateDeployment provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) CreateDeployment(_a0 context.Context, _a1 string, _a2 string, _a3 *github.DeploymentRequest) (*github.Deployment, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Deployment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.DeploymentRequest) *github.Deployment); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Deployment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.DeploymentRequest) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.DeploymentRequest) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateDeploymentStatus provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) CreateDeploymentStatus(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 *github.DeploymentStatusRequest) (*github.DeploymentStatus, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.DeploymentStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.DeploymentStatusRequest) *github.DeploymentStatus); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.DeploymentStatus)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.DeploymentStatusRequest) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, *github.DeploymentStatusRequest) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateFile provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) CreateFile(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.RepositoryContentResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentFileOptions) *github.RepositoryContentResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryContentResponse)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryContentFileOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryContentFileOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateFork provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) CreateFork(_a0 context.Context, _a1 string, _a2 string, _a3 *github.RepositoryCreateForkOptions) (*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.RepositoryCreateForkOptions) *github.Repository); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.RepositoryCreateForkOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.RepositoryCreateForkOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateFromTemplate provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) CreateFromTemplate(_a0 context.Context, _a1 string, _a2 string, _a3 *github.TemplateRepoRequest) (*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.TemplateRepoRequest) *github.Repository); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.TemplateRepoRequest) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.TemplateRepoRequest) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateHook provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) CreateHook(_a0 context.Context, _a1 string, _a2 string, _a3 *github.Hook) (*github.Hook, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Hook
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.Hook) *github.Hook); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Hook)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.Hook) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.Hook) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateKey provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) CreateKey(_a0 context.Context, _a1 string, _a2 string, _a3 *github.Key) (*github.Key, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Key
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.Key) *github.Key); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Key)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.Key) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.Key) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateProject provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) CreateProject(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ProjectOptions) (*github.Project, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Project
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ProjectOptions) *github.Project); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Project)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ProjectOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ProjectOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateRelease provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) CreateRelease(_a0 context.Context, _a1 string, _a2 string, _a3 *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.RepositoryRelease) *github.RepositoryRelease); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.RepositoryRelease) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.RepositoryRelease) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateStatus provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) CreateStatus(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.RepoStatus) (*github.RepoStatus, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.RepoStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepoStatus) *github.RepoStatus); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepoStatus)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepoStatus) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepoStatus) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateUpdateEnvironment provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) CreateUpdateEnvironment(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.CreateUpdateEnvironment) (*github.Environment, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.Environment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.CreateUpdateEnvironment) *github.Environment); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Environment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.CreateUpdateEnvironment) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.CreateUpdateEnvironment) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) Delete(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) DeleteComment(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeployment provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) DeleteDeployment(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironment provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) DeleteEnvironment(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFile provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) DeleteFile(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.RepositoryContentResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentFileOptions) *github.RepositoryContentResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryContentResponse)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryContentFileOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryContentFileOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteHook provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) DeleteHook(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInvitation provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) DeleteInvitation(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKey provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) DeleteKey(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePreReceiveHook provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) DeletePreReceiveHook(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelease provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) DeleteRelease(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReleaseAsset provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) DeleteReleaseAsset(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableAutomatedSecurityFixes provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) DisableAutomatedSecurityFixes(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableDismissalRestrictions provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) DisableDismissalRestrictions(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.PullRequestReviewsEnforcement
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.PullRequestReviewsEnforcement); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PullRequestReviewsEnforcement)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DisablePages provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) DisablePages(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableVulnerabilityAlerts provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) DisableVulnerabilityAlerts(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dispatch provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) Dispatch(_a0 context.Context, _a1 string, _a2 string, _a3 github.DispatchRequestOptions) (*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, string, github.DispatchRequestOptions) *github.Repository); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, github.DispatchRequestOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, github.DispatchRequestOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DownloadContents provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) DownloadContents(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.RepositoryContentGetOptions) (io.ReadCloser, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) io.ReadCloser); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DownloadContentsWithMeta provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) DownloadContentsWithMeta(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.RepositoryContentGetOptions) (io.ReadCloser, *github.RepositoryContent, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) io.ReadCloser); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 *github.RepositoryContent
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.RepositoryContent); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.RepositoryContent)
		}
	}

	var r2 *github.Response
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.Response); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*github.Response)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) error); ok {
		r3 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// DownloadReleaseAsset provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) DownloadReleaseAsset(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 *http.Client) (io.ReadCloser, string, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *http.Client) io.ReadCloser); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *http.Client) string); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, *http.Client) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Edit provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) Edit(_a0 context.Context, _a1 string, _a2 string, _a3 *github.Repository) (*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.Repository) *github.Repository); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.Repository) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.Repository) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EditHook provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) EditHook(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 *github.Hook) (*github.Hook, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.Hook
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.Hook) *github.Hook); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Hook)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.Hook) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, *github.Hook) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EditRelease provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) EditRelease(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.RepositoryRelease) *github.RepositoryRelease); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.RepositoryRelease) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, *github.RepositoryRelease) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EditReleaseAsset provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) EditReleaseAsset(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 *github.ReleaseAsset) (*github.ReleaseAsset, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.ReleaseAsset
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.ReleaseAsset) *github.ReleaseAsset); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.ReleaseAsset)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.ReleaseAsset) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, *github.ReleaseAsset) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EnableAutomatedSecurityFixes provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) EnableAutomatedSecurityFixes(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnablePages provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) EnablePages(_a0 context.Context, _a1 string, _a2 string, _a3 *github.Pages) (*github.Pages, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Pages
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.Pages) *github.Pages); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Pages)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.Pages) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.Pages) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EnableVulnerabilityAlerts provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) EnableVulnerabilityAlerts(_a0 context.Context, _a1 string, _a2 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) Get(_a0 context.Context, _a1 string, _a2 string) (*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Repository); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAdminEnforcement provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetAdminEnforcement(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.AdminEnforcement, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.AdminEnforcement
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.AdminEnforcement); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.AdminEnforcement)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetArchiveLink provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *Repositories) GetArchiveLink(_a0 context.Context, _a1 string, _a2 string, _a3 github.ArchiveFormat, _a4 *github.RepositoryContentGetOptions, _a5 bool) (*url.URL, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(context.Context, string, string, github.ArchiveFormat, *github.RepositoryContentGetOptions, bool) *url.URL); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, github.ArchiveFormat, *github.RepositoryContentGetOptions, bool) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, github.ArchiveFormat, *github.RepositoryContentGetOptions, bool) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBranch provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetBranch(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Branch, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Branch
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Branch); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Branch)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBranchProtection provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetBranchProtection(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Protection, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Protection
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Protection); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Protection)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *Repositories) GetByID(_a0 context.Context, _a1 int64) (*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, int64) *github.Repository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, int64) *github.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCodeOfConduct provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) GetCodeOfConduct(_a0 context.Context, _a1 string, _a2 string) (*github.CodeOfConduct, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.CodeOfConduct
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.CodeOfConduct); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.CodeOfConduct)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCombinedStatus provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) GetCombinedStatus(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.ListOptions) (*github.CombinedStatus, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.CombinedStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.ListOptions) *github.CombinedStatus); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.CombinedStatus)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetComment provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetComment(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.RepositoryComment, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.RepositoryComment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.RepositoryComment); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryComment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCommit provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetCommit(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.RepositoryCommit, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.RepositoryCommit
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.RepositoryCommit); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryCommit)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCommitRaw provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) GetCommitRaw(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 github.RawOptions) (string, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, github.RawOptions) string); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, github.RawOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, github.RawOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCommitSHA1 provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) GetCommitSHA1(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 string) (string, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) string); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCommunityHealthMetrics provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) GetCommunityHealthMetrics(_a0 context.Context, _a1 string, _a2 string) (*github.CommunityHealthMetrics, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.CommunityHealthMetrics
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.CommunityHealthMetrics); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.CommunityHealthMetrics)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetContents provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) GetContents(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.RepositoryContent
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.RepositoryContent); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryContent)
		}
	}

	var r1 []*github.RepositoryContent
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) []*github.RepositoryContent); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*github.RepositoryContent)
		}
	}

	var r2 *github.Response
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.Response); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*github.Response)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) error); ok {
		r3 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetDeployment provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetDeployment(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Deployment, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Deployment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Deployment); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Deployment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDeploymentStatus provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) GetDeploymentStatus(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 int64) (*github.DeploymentStatus, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.DeploymentStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) *github.DeploymentStatus); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.DeploymentStatus)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, int64) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetEnvironment provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetEnvironment(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Environment, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Environment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Environment); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Environment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetHook provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetHook(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Hook, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Hook
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Hook); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Hook)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetKey provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetKey(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Key, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Key
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Key); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Key)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetLatestPagesBuild provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) GetLatestPagesBuild(_a0 context.Context, _a1 string, _a2 string) (*github.PagesBuild, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.PagesBuild
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.PagesBuild); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PagesBuild)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetLatestRelease provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) GetLatestRelease(_a0 context.Context, _a1 string, _a2 string) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.RepositoryRelease); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPageBuild provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetPageBuild(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.PagesBuild, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.PagesBuild
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.PagesBuild); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PagesBuild)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPagesInfo provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) GetPagesInfo(_a0 context.Context, _a1 string, _a2 string) (*github.Pages, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.Pages
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Pages); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Pages)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPermissionLevel provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetPermissionLevel(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.RepositoryPermissionLevel, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.RepositoryPermissionLevel
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.RepositoryPermissionLevel); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryPermissionLevel)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPreReceiveHook provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetPreReceiveHook(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.PreReceiveHook, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.PreReceiveHook
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.PreReceiveHook); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PreReceiveHook)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPullRequestReviewEnforcement provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetPullRequestReviewEnforcement(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.PullRequestReviewsEnforcement
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.PullRequestReviewsEnforcement); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PullRequestReviewsEnforcement)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetReadme provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetReadme(_a0 context.Context, _a1 string, _a2 string, _a3 *github.RepositoryContentGetOptions) (*github.RepositoryContent, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.RepositoryContent
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.RepositoryContentGetOptions) *github.RepositoryContent); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryContent)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.RepositoryContentGetOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.RepositoryContentGetOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRelease provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetRelease(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.RepositoryRelease); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetReleaseAsset provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetReleaseAsset(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.ReleaseAsset, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.ReleaseAsset
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.ReleaseAsset); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.ReleaseAsset)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetReleaseByTag provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetReleaseByTag(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.RepositoryRelease); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRequiredStatusChecks provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetRequiredStatusChecks(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.RequiredStatusChecks, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.RequiredStatusChecks
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.RequiredStatusChecks); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RequiredStatusChecks)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSignaturesProtectedBranch provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) GetSignaturesProtectedBranch(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.SignaturesProtectedBranch, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.SignaturesProtectedBranch
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.SignaturesProtectedBranch); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.SignaturesProtectedBranch)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetVulnerabilityAlerts provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) GetVulnerabilityAlerts(_a0 context.Context, _a1 string, _a2 string) (bool, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsCollaborator provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) IsCollaborator(_a0 context.Context, _a1 string, _a2 string, _a3 string) (bool, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// License provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) License(_a0 context.Context, _a1 string, _a2 string) (*github.RepositoryLicense, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.RepositoryLicense
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.RepositoryLicense); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryLicense)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// List provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) List(_a0 context.Context, _a1 string, _a2 *github.RepositoryListOptions) ([]*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.RepositoryListOptions) []*github.Repository); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.RepositoryListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.RepositoryListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAll provides a mock function with given fields: _a0, _a1
func (_m *Repositories) ListAll(_a0 context.Context, _a1 *github.RepositoryListAllOptions) ([]*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, *github.RepositoryListAllOptions) []*github.Repository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, *github.RepositoryListAllOptions) *github.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *github.RepositoryListAllOptions) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAllTopics provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) ListAllTopics(_a0 context.Context, _a1 string, _a2 string) ([]string, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListApps provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListApps(_a0 context.Context, _a1 string, _a2 string, _a3 string) ([]*github.App, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.App
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*github.App); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.App)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListBranches provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListBranches(_a0 context.Context, _a1 string, _a2 string, _a3 *github.BranchListOptions) ([]*github.Branch, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.Branch
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.BranchListOptions) []*github.Branch); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Branch)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.BranchListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.BranchListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListBranchesHeadCommit provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListBranchesHeadCommit(_a0 context.Context, _a1 string, _a2 string, _a3 string) ([]*github.BranchCommit, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.BranchCommit
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*github.BranchCommit); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.BranchCommit)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListByOrg provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) ListByOrg(_a0 context.Context, _a1 string, _a2 *github.RepositoryListByOrgOptions) ([]*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.RepositoryListByOrgOptions) []*github.Repository); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *github.RepositoryListByOrgOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *github.RepositoryListByOrgOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListCodeFrequency provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) ListCodeFrequency(_a0 context.Context, _a1 string, _a2 string) ([]*github.WeeklyStats, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.WeeklyStats
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*github.WeeklyStats); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.WeeklyStats)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListCollaborators provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListCollaborators(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListCollaboratorsOptions) ([]*github.User, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListCollaboratorsOptions) []*github.User); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.User)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListCollaboratorsOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListCollaboratorsOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListComments provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListComments(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListOptions) ([]*github.RepositoryComment, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.RepositoryComment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.RepositoryComment); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryComment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListCommitActivity provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) ListCommitActivity(_a0 context.Context, _a1 string, _a2 string) ([]*github.WeeklyCommitActivity, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.WeeklyCommitActivity
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*github.WeeklyCommitActivity); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.WeeklyCommitActivity)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListCommitComments provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) ListCommitComments(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.ListOptions) ([]*github.RepositoryComment, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*github.RepositoryComment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.ListOptions) []*github.RepositoryComment); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryComment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListCommits provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListCommits(_a0 context.Context, _a1 string, _a2 string, _a3 *github.CommitsListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.RepositoryCommit
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.CommitsListOptions) []*github.RepositoryCommit); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryCommit)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.CommitsListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.CommitsListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListContributors provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListContributors(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListContributorsOptions) ([]*github.Contributor, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.Contributor
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListContributorsOptions) []*github.Contributor); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Contributor)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListContributorsOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListContributorsOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListContributorsStats provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) ListContributorsStats(_a0 context.Context, _a1 string, _a2 string) ([]*github.ContributorStats, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.ContributorStats
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*github.ContributorStats); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.ContributorStats)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListDeploymentStatuses provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) ListDeploymentStatuses(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 *github.ListOptions) ([]*github.DeploymentStatus, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*github.DeploymentStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.ListOptions) []*github.DeploymentStatus); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.DeploymentStatus)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListDeployments provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListDeployments(_a0 context.Context, _a1 string, _a2 string, _a3 *github.DeploymentsListOptions) ([]*github.Deployment, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.Deployment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.DeploymentsListOptions) []*github.Deployment); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Deployment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.DeploymentsListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.DeploymentsListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListEnvironments provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) ListEnvironments(_a0 context.Context, _a1 string, _a2 string) (*github.EnvResponse, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.EnvResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.EnvResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.EnvResponse)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListForks provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListForks(_a0 context.Context, _a1 string, _a2 string, _a3 *github.RepositoryListForksOptions) ([]*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.RepositoryListForksOptions) []*github.Repository); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.RepositoryListForksOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.RepositoryListForksOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListHooks provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListHooks(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListOptions) ([]*github.Hook, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.Hook
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.Hook); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Hook)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListInvitations provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListInvitations(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListOptions) ([]*github.RepositoryInvitation, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.RepositoryInvitation
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.RepositoryInvitation); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryInvitation)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListKeys provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListKeys(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListOptions) ([]*github.Key, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.Key
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.Key); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Key)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListLanguages provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) ListLanguages(_a0 context.Context, _a1 string, _a2 string) (map[string]int, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]int); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPagesBuilds provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListPagesBuilds(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListOptions) ([]*github.PagesBuild, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.PagesBuild
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.PagesBuild); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.PagesBuild)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListParticipation provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) ListParticipation(_a0 context.Context, _a1 string, _a2 string) (*github.RepositoryParticipation, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.RepositoryParticipation
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.RepositoryParticipation); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryParticipation)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPreReceiveHooks provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListPreReceiveHooks(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListOptions) ([]*github.PreReceiveHook, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.PreReceiveHook
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.PreReceiveHook); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.PreReceiveHook)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListProjects provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListProjects(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ProjectListOptions) ([]*github.Project, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.Project
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ProjectListOptions) []*github.Project); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Project)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ProjectListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ProjectListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPunchCard provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) ListPunchCard(_a0 context.Context, _a1 string, _a2 string) ([]*github.PunchCard, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.PunchCard
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*github.PunchCard); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.PunchCard)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListReleaseAssets provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) ListReleaseAssets(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 *github.ListOptions) ([]*github.ReleaseAsset, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*github.ReleaseAsset
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.ListOptions) []*github.ReleaseAsset); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.ReleaseAsset)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListReleases provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListReleases(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.RepositoryRelease); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListRequiredStatusChecksContexts provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListRequiredStatusChecksContexts(_a0 context.Context, _a1 string, _a2 string, _a3 string) ([]string, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []string); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListStatuses provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) ListStatuses(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.ListOptions) ([]*github.RepoStatus, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*github.RepoStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.ListOptions) []*github.RepoStatus); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepoStatus)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTags provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListTags(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListOptions) ([]*github.RepositoryTag, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.RepositoryTag
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.RepositoryTag); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryTag)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTeams provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListTeams(_a0 context.Context, _a1 string, _a2 string, _a3 *github.ListOptions) ([]*github.Team, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*github.Team
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.Team); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Team)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTrafficClones provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListTrafficClones(_a0 context.Context, _a1 string, _a2 string, _a3 *github.TrafficBreakdownOptions) (*github.TrafficClones, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.TrafficClones
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.TrafficBreakdownOptions) *github.TrafficClones); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.TrafficClones)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.TrafficBreakdownOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.TrafficBreakdownOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTrafficPaths provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) ListTrafficPaths(_a0 context.Context, _a1 string, _a2 string) ([]*github.TrafficPath, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.TrafficPath
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*github.TrafficPath); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.TrafficPath)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTrafficReferrers provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) ListTrafficReferrers(_a0 context.Context, _a1 string, _a2 string) ([]*github.TrafficReferrer, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*github.TrafficReferrer
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*github.TrafficReferrer); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.TrafficReferrer)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTrafficViews provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ListTrafficViews(_a0 context.Context, _a1 string, _a2 string, _a3 *github.TrafficBreakdownOptions) (*github.TrafficViews, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.TrafficViews
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.TrafficBreakdownOptions) *github.TrafficViews); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.TrafficViews)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.TrafficBreakdownOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.TrafficBreakdownOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Merge provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) Merge(_a0 context.Context, _a1 string, _a2 string, _a3 *github.RepositoryMergeRequest) (*github.RepositoryCommit, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.RepositoryCommit
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.RepositoryMergeRequest) *github.RepositoryCommit); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryCommit)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.RepositoryMergeRequest) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.RepositoryMergeRequest) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OptionalSignaturesOnProtectedBranch provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) OptionalSignaturesOnProtectedBranch(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingHook provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) PingHook(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAdminEnforcement provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) RemoveAdminEnforcement(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAppRestrictions provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) RemoveAppRestrictions(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 []string) ([]*github.App, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*github.App
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) []*github.App); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.App)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, []string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveBranchProtection provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) RemoveBranchProtection(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveCollaborator provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) RemoveCollaborator(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePullRequestReviewEnforcement provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) RemovePullRequestReviewEnforcement(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRequiredStatusChecks provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) RemoveRequiredStatusChecks(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceAllTopics provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) ReplaceAllTopics(_a0 context.Context, _a1 string, _a2 string, _a3 []string) ([]string, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) []string); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, []string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReplaceAppRestrictions provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) ReplaceAppRestrictions(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 []string) ([]*github.App, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*github.App
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) []*github.App); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.App)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, []string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RequestPageBuild provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repositories) RequestPageBuild(_a0 context.Context, _a1 string, _a2 string) (*github.PagesBuild, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *github.PagesBuild
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.PagesBuild); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PagesBuild)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RequireSignaturesOnProtectedBranch provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) RequireSignaturesOnProtectedBranch(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.SignaturesProtectedBranch, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.SignaturesProtectedBranch
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.SignaturesProtectedBranch); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.SignaturesProtectedBranch)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TestHook provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) TestHook(_a0 context.Context, _a1 string, _a2 string, _a3 int64) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) Transfer(_a0 context.Context, _a1 string, _a2 string, _a3 github.TransferRequest) (*github.Repository, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, string, github.TransferRequest) *github.Repository); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, github.TransferRequest) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, github.TransferRequest) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateBranchProtection provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) UpdateBranchProtection(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.ProtectionRequest) (*github.Protection, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.Protection
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.ProtectionRequest) *github.Protection); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Protection)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.ProtectionRequest) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.ProtectionRequest) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateComment provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) UpdateComment(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 *github.RepositoryComment) (*github.RepositoryComment, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.RepositoryComment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.RepositoryComment) *github.RepositoryComment); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryComment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.RepositoryComment) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, *github.RepositoryComment) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateFile provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) UpdateFile(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.RepositoryContentResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentFileOptions) *github.RepositoryContentResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryContentResponse)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryContentFileOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryContentFileOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateInvitation provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) UpdateInvitation(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 string) (*github.RepositoryInvitation, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.RepositoryInvitation
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, string) *github.RepositoryInvitation); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryInvitation)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePages provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Repositories) UpdatePages(_a0 context.Context, _a1 string, _a2 string, _a3 *github.PagesUpdate) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.PagesUpdate) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.PagesUpdate) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePreReceiveHook provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) UpdatePreReceiveHook(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 *github.PreReceiveHook) (*github.PreReceiveHook, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.PreReceiveHook
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.PreReceiveHook) *github.PreReceiveHook); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PreReceiveHook)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.PreReceiveHook) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, *github.PreReceiveHook) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePullRequestReviewEnforcement provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) UpdatePullRequestReviewEnforcement(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.PullRequestReviewsEnforcementUpdate) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.PullRequestReviewsEnforcement
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.PullRequestReviewsEnforcementUpdate) *github.PullRequestReviewsEnforcement); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PullRequestReviewsEnforcement)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.PullRequestReviewsEnforcementUpdate) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.PullRequestReviewsEnforcementUpdate) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateRequiredStatusChecks provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Repositories) UpdateRequiredStatusChecks(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.RequiredStatusChecksRequest) (*github.RequiredStatusChecks, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *github.RequiredStatusChecks
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RequiredStatusChecksRequest) *github.RequiredStatusChecks); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RequiredStatusChecks)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RequiredStatusChecksRequest) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RequiredStatusChecksRequest) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UploadReleaseAsset provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *Repositories) UploadReleaseAsset(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 *github.UploadOptions, _a5 *os.File) (*github.ReleaseAsset, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 *github.ReleaseAsset
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.UploadOptions, *os.File) *github.ReleaseAsset); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.ReleaseAsset)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.UploadOptions, *os.File) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, *github.UploadOptions, *os.File) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
