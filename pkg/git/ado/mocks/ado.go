// Code generated by MockGen. DO NOT EDIT.
// Source: ./provider_ado.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/microsoft/azure-devops-go-api/azuredevops/git"
)

// MockAdoClient is a mock of AdoClient interface.
type MockAdoClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdoClientMockRecorder
}

// MockAdoClientMockRecorder is the mock recorder for MockAdoClient.
type MockAdoClientMockRecorder struct {
	mock *MockAdoClient
}

// NewMockAdoClient creates a new mock instance.
func NewMockAdoClient(ctrl *gomock.Controller) *MockAdoClient {
	mock := &MockAdoClient{ctrl: ctrl}
	mock.recorder = &MockAdoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdoClient) EXPECT() *MockAdoClientMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method.
func (m *MockAdoClient) CreateRepository(arg0 context.Context, arg1 git.CreateRepositoryArgs) (*git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockAdoClientMockRecorder) CreateRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockAdoClient)(nil).CreateRepository), arg0, arg1)
}

// GetRepository mocks base method.
func (m *MockAdoClient) GetRepository(arg0 context.Context, arg1 git.GetRepositoryArgs) (*git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", arg0, arg1)
	ret0, _ := ret[0].(*git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockAdoClientMockRecorder) GetRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockAdoClient)(nil).GetRepository), arg0, arg1)
}

// MockAdoUrl is a mock of AdoUrl interface.
type MockAdoUrl struct {
	ctrl     *gomock.Controller
	recorder *MockAdoUrlMockRecorder
}

// MockAdoUrlMockRecorder is the mock recorder for MockAdoUrl.
type MockAdoUrlMockRecorder struct {
	mock *MockAdoUrl
}

// NewMockAdoUrl creates a new mock instance.
func NewMockAdoUrl(ctrl *gomock.Controller) *MockAdoUrl {
	mock := &MockAdoUrl{ctrl: ctrl}
	mock.recorder = &MockAdoUrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdoUrl) EXPECT() *MockAdoUrlMockRecorder {
	return m.recorder
}

// GetProjectName mocks base method.
func (m *MockAdoUrl) GetProjectName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProjectName indicates an expected call of GetProjectName.
func (mr *MockAdoUrlMockRecorder) GetProjectName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectName", reflect.TypeOf((*MockAdoUrl)(nil).GetProjectName))
}
