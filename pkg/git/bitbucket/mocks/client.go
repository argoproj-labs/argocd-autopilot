// Code generated by MockGen. DO NOT EDIT.
// Source: ./provider_bitbucket.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bitbucket "github.com/ktrysmt/go-bitbucket"
)

// MockbbRepo is a mock of bbRepo interface.
type MockbbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockbbRepoMockRecorder
}

// MockbbRepoMockRecorder is the mock recorder for MockbbRepo.
type MockbbRepoMockRecorder struct {
	mock *MockbbRepo
}

// NewMockbbRepo creates a new mock instance.
func NewMockbbRepo(ctrl *gomock.Controller) *MockbbRepo {
	mock := &MockbbRepo{ctrl: ctrl}
	mock.recorder = &MockbbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbbRepo) EXPECT() *MockbbRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockbbRepo) Create(ro *bitbucket.RepositoryOptions) (*bitbucket.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ro)
	ret0, _ := ret[0].(*bitbucket.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockbbRepoMockRecorder) Create(ro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockbbRepo)(nil).Create), ro)
}

// Get mocks base method.
func (m *MockbbRepo) Get(ro *bitbucket.RepositoryOptions) (*bitbucket.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ro)
	ret0, _ := ret[0].(*bitbucket.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockbbRepoMockRecorder) Get(ro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockbbRepo)(nil).Get), ro)
}

// MockbbUser is a mock of bbUser interface.
type MockbbUser struct {
	ctrl     *gomock.Controller
	recorder *MockbbUserMockRecorder
}

// MockbbUserMockRecorder is the mock recorder for MockbbUser.
type MockbbUserMockRecorder struct {
	mock *MockbbUser
}

// NewMockbbUser creates a new mock instance.
func NewMockbbUser(ctrl *gomock.Controller) *MockbbUser {
	mock := &MockbbUser{ctrl: ctrl}
	mock.recorder = &MockbbUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbbUser) EXPECT() *MockbbUserMockRecorder {
	return m.recorder
}

// Emails mocks base method.
func (m *MockbbUser) Emails() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Emails")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Emails indicates an expected call of Emails.
func (mr *MockbbUserMockRecorder) Emails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emails", reflect.TypeOf((*MockbbUser)(nil).Emails))
}

// Profile mocks base method.
func (m *MockbbUser) Profile() (*bitbucket.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile")
	ret0, _ := ret[0].(*bitbucket.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Profile indicates an expected call of Profile.
func (mr *MockbbUserMockRecorder) Profile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockbbUser)(nil).Profile))
}
