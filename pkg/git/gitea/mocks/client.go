// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	gitea "code.gitea.io/sdk/gitea"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateOrgRepo provides a mock function with given fields: org, opt
func (_m *Client) CreateOrgRepo(org string, opt gitea.CreateRepoOption) (*gitea.Repository, *gitea.Response, error) {
	ret := _m.Called(org, opt)

	var r0 *gitea.Repository
	if rf, ok := ret.Get(0).(func(string, gitea.CreateRepoOption) *gitea.Repository); ok {
		r0 = rf(org, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitea.Repository)
		}
	}

	var r1 *gitea.Response
	if rf, ok := ret.Get(1).(func(string, gitea.CreateRepoOption) *gitea.Response); ok {
		r1 = rf(org, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitea.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, gitea.CreateRepoOption) error); ok {
		r2 = rf(org, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateRepo provides a mock function with given fields: opt
func (_m *Client) CreateRepo(opt gitea.CreateRepoOption) (*gitea.Repository, *gitea.Response, error) {
	ret := _m.Called(opt)

	var r0 *gitea.Repository
	if rf, ok := ret.Get(0).(func(gitea.CreateRepoOption) *gitea.Repository); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitea.Repository)
		}
	}

	var r1 *gitea.Response
	if rf, ok := ret.Get(1).(func(gitea.CreateRepoOption) *gitea.Response); ok {
		r1 = rf(opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitea.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(gitea.CreateRepoOption) error); ok {
		r2 = rf(opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMyUserInfo provides a mock function with given fields:
func (_m *Client) GetMyUserInfo() (*gitea.User, *gitea.Response, error) {
	ret := _m.Called()

	var r0 *gitea.User
	if rf, ok := ret.Get(0).(func() *gitea.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitea.User)
		}
	}

	var r1 *gitea.Response
	if rf, ok := ret.Get(1).(func() *gitea.Response); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitea.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
