// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	application "github.com/argoproj/argocd-autopilot/pkg/application"
	mock "github.com/stretchr/testify/mock"

	types "sigs.k8s.io/kustomize/api/types"

	v1 "k8s.io/api/core/v1"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// Base provides a mock function with given fields:
func (_m *Application) Base() *types.Kustomization {
	ret := _m.Called()

	var r0 *types.Kustomization
	if rf, ok := ret.Get(0).(func() *types.Kustomization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Kustomization)
		}
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *Application) Config() *application.Config {
	ret := _m.Called()

	var r0 *application.Config
	if rf, ok := ret.Get(0).(func() *application.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*application.Config)
		}
	}

	return r0
}

// Manifests provides a mock function with given fields:
func (_m *Application) Manifests() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Application) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Namespace provides a mock function with given fields:
func (_m *Application) Namespace() *v1.Namespace {
	ret := _m.Called()

	var r0 *v1.Namespace
	if rf, ok := ret.Get(0).(func() *v1.Namespace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Namespace)
		}
	}

	return r0
}

// Overlay provides a mock function with given fields:
func (_m *Application) Overlay() *types.Kustomization {
	ret := _m.Called()

	var r0 *types.Kustomization
	if rf, ok := ret.Get(0).(func() *types.Kustomization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Kustomization)
		}
	}

	return r0
}
