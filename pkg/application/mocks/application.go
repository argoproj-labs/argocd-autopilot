// Code generated by MockGen. DO NOT EDIT.
// Source: ./application.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	fs "github.com/argoproj-labs/argocd-autopilot/pkg/fs"
	gomock "github.com/golang/mock/gomock"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// CreateFiles mocks base method.
func (m *MockApplication) CreateFiles(repofs, appsfs fs.FS, projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFiles", repofs, appsfs, projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFiles indicates an expected call of CreateFiles.
func (mr *MockApplicationMockRecorder) CreateFiles(repofs, appsfs, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFiles", reflect.TypeOf((*MockApplication)(nil).CreateFiles), repofs, appsfs, projectName)
}

// Name mocks base method.
func (m *MockApplication) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockApplicationMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockApplication)(nil).Name))
}
